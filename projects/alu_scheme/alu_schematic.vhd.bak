-- Copyright (C) 1991-2011 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.

-- PROGRAM		"Quartus II"
-- VERSION		"Version 11.0 Build 208 07/03/2011 Service Pack 1 SJ Web Edition"
-- CREATED		"Sat Dec 26 10:29:09 2020"

LIBRARY ieee;
USE ieee.std_logic_1164.all; 

LIBRARY work;

ENTITY alu_schematic IS 
	PORT
	(
		a :  IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
		b :  IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
		command :  IN  STD_LOGIC_VECTOR(2 DOWNTO 0);
		carry :  OUT  STD_LOGIC;
		result :  OUT  STD_LOGIC_VECTOR(7 DOWNTO 0)
	);
END alu_schematic;

ARCHITECTURE bdf_type OF alu_schematic IS 

COMPONENT lpm_add_sub0
	PORT(add_sub : IN STD_LOGIC;
		 dataa : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
		 datab : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
		 overflow : OUT STD_LOGIC;
		 cout : OUT STD_LOGIC;
		 result : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
	);
END COMPONENT;

COMPONENT lpm_mux1
	PORT(data7 : IN STD_LOGIC;
		 data6 : IN STD_LOGIC;
		 data5 : IN STD_LOGIC;
		 data4 : IN STD_LOGIC;
		 data3 : IN STD_LOGIC;
		 data2 : IN STD_LOGIC;
		 data1 : IN STD_LOGIC;
		 data0 : IN STD_LOGIC;
		 sel : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
		 result : OUT STD_LOGIC
	);
END COMPONENT;

COMPONENT lpm_divide0
	PORT(denom : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
		 numer : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
		 quotient : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
		 remain : OUT STD_LOGIC_VECTOR(1 DOWNTO 0)
	);
END COMPONENT;

COMPONENT lpm_mult0
	PORT(dataa : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
		 result : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
	);
END COMPONENT;

COMPONENT lpm_mux0
	PORT(data0x : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
		 data1x : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
		 data2x : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
		 data3x : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
		 data4x : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
		 data5x : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
		 data6x : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
		 data7x : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
		 sel : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
		 result : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
	);
END COMPONENT;

SIGNAL	0 :  STD_LOGIC;
SIGNAL	1 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_9 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_1 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_10 :  STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_5 :  STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_6 :  STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_7 :  STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_8 :  STD_LOGIC_VECTOR(7 DOWNTO 0);

SIGNAL	GDFX_TEMP_SIGNAL_2 :  STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL	GDFX_TEMP_SIGNAL_1 :  STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL	GDFX_TEMP_SIGNAL_0 :  STD_LOGIC_VECTOR(1 DOWNTO 0);

BEGIN 

GDFX_TEMP_SIGNAL_2 <= (a(6 DOWNTO 0) & '0');
GDFX_TEMP_SIGNAL_1 <= ('0' & a(7 DOWNTO 1));
GDFX_TEMP_SIGNAL_0 <= ('1' & '0');


b2v_add_sub : lpm_add_sub0
PORT MAP(add_sub => command(0),
		 dataa => a,
		 datab => b,
		 cout => SYNTHESIZED_WIRE_9,
		 result => SYNTHESIZED_WIRE_10);


SYNTHESIZED_WIRE_6 <= a AND b;


b2v_carry_mux : lpm_mux1
PORT MAP(data7 => 0,
		 data6 => 0,
		 data5 => 0,
		 data4 => 0,
		 data3 => a(7),
		 data2 => a(0),
		 data1 => SYNTHESIZED_WIRE_9,
		 data0 => SYNTHESIZED_WIRE_1,
		 sel => command,
		 result => carry);


b2v_divide_2 : lpm_divide0
PORT MAP(denom => GDFX_TEMP_SIGNAL_0,
		 numer => a);




b2v_mult_2 : lpm_mult0
PORT MAP(dataa => a);


SYNTHESIZED_WIRE_5 <= NOT(a);



SYNTHESIZED_WIRE_1 <= NOT(SYNTHESIZED_WIRE_9);



SYNTHESIZED_WIRE_7 <= b OR a;


b2v_result_mux : lpm_mux0
PORT MAP(data0x => SYNTHESIZED_WIRE_10,
		 data1x => SYNTHESIZED_WIRE_10,
		 data2x => GDFX_TEMP_SIGNAL_1,
		 data3x => GDFX_TEMP_SIGNAL_2,
		 data4x => SYNTHESIZED_WIRE_5,
		 data5x => SYNTHESIZED_WIRE_6,
		 data6x => SYNTHESIZED_WIRE_7,
		 data7x => SYNTHESIZED_WIRE_8,
		 sel => command,
		 result => result);


SYNTHESIZED_WIRE_8 <= a XOR b;


--0 <= '0';
--1 <= '1';
END bdf_type;